{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","View","ViewOff","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","isCentered","flexDir","alignItems","boxSize","src","alt","md","fontWeight","textColor","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","showEmoji","setShowEmoji","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","sendText","ArrowBack","isGroupChat","toUpperCase","className","overflowY","alignSelf","margin","options","marginBottom","onKeyDown","height","onEmojiClick","emoji","pt","pr","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"ujIA2HeA,EAjHD,WACZ,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAQC,cACd,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAEMC,EAAUC,cAEVC,EAAa,uCAAG,gCAAAC,EAAA,yDACpBJ,GAAW,GACNL,GAAUE,EAFK,uBAGlBJ,EAAM,CACJY,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZT,GAAW,GAVO,0CAgBZU,EAAS,CACbC,QAAS,CACP,eAAgB,qBAlBF,SAsBKC,IAAMC,KAC3B,kBACA,CAAElB,QAAOE,YACTa,GAzBgB,gBAsBVI,EAtBU,EAsBVA,KAORrB,EAAM,CACJY,MAAO,mBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZM,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,IAChDd,GAAW,GACXC,EAAQkB,KAAK,UAtCK,kDAwClB1B,EAAM,CACJY,MAAO,iBACPe,YAAa,KAAMC,SAASP,KAAKQ,QACjChB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZT,GAAW,GAhDO,0DAAH,qDAoDnB,OACE,eAAC,IAAD,CAAQuB,QAAQ,OAAhB,UACE,eAAC,IAAD,CAAaC,GAAG,QAAQC,YAAU,EAAlC,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACEC,MAAO/B,EACPgC,KAAK,QACLC,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAOlC,EAASkC,EAAEC,OAAOL,aAGvC,eAAC,IAAD,CAAaF,GAAG,WAAWC,YAAU,EAArC,UACE,cAAC,IAAD,uBACA,eAAC,IAAD,CAAYO,KAAK,KAAjB,UACE,cAAC,IAAD,CACEN,MAAO7B,EACPgC,SAAU,SAACC,GAAD,OAAOhC,EAAYgC,EAAEC,OAAOL,QACtCC,KAAMpC,EAAO,OAAS,WACtBqC,YAAY,mBAEd,cAAC,IAAD,CAAmBK,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQC,EAAE,UAAUF,KAAK,KAAKG,QAjFpB,kBAAM3C,GAASD,IAiFzB,SACGA,EAAQ,cAAC6C,EAAA,EAAD,IAAc,cAACC,EAAA,EAAD,cAK/B,cAAC,IAAD,CACEC,YAAY,OACZL,MAAM,OACNM,MAAO,CAAEC,UAAW,IACpBL,QAAShC,EACTsC,UAAW1C,EALb,mBASA,cAAC,IAAD,CACE2C,QAAQ,QACRJ,YAAY,MACZL,MAAM,OACNE,QAAS,WACPvC,EAAS,qBACTE,EAAY,WANhB,4CC6FS6C,EA/LA,WACb,MAAwBrD,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMoD,EAAc,kBAAMpD,GAASD,IAC7BE,EAAQC,cACRO,EAAUC,cAEhB,EAAwBZ,mBAAS,IAAjC,mBAAOuD,EAAP,KAAaC,EAAb,KACA,EAA0BxD,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA8CN,mBAAS,IAAvD,mBAAOyD,EAAP,KAAwBC,EAAxB,KACA,EAAgC1D,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAsBR,mBAAS,IAA/B,mBAAO2D,EAAP,KAAYC,EAAZ,KACA,EAAoC5D,oBAAS,GAA7C,mBAAO6D,EAAP,KAAmBC,EAAnB,KAEMjD,EAAa,uCAAG,gCAAAC,EAAA,yDACpBgD,GAAc,GACTP,GAASlD,GAAUE,GAAakD,EAFjB,uBAGlBtD,EAAM,CACJY,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZ2C,GAAc,GAVI,6BAahBvD,IAAakD,EAbG,uBAclBtD,EAAM,CACJY,MAAO,yBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAnBM,iCAuBpB4C,QAAQC,IAAIT,EAAMlD,EAAOE,EAAUoD,GAvBf,SAyBZvC,EAAS,CACbC,QAAS,CACP,eAAgB,qBA3BF,UA8BKC,IAAMC,KAC3B,YACA,CACEgC,OACAlD,QACAE,WACAoD,OAEFvC,GAtCgB,iBA8BVI,EA9BU,EA8BVA,KAURuC,QAAQC,IAAIxC,GACZrB,EAAM,CACJY,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZM,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,IAChDsC,GAAc,GACdnD,EAAQkB,KAAK,UAlDK,kDAoDlB1B,EAAM,CACJY,MAAO,iBACPe,YAAa,KAAMC,SAASP,KAAKQ,QACjChB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZ2C,GAAc,GA5DI,0DAAH,qDA6GnB,OACE,eAAC,IAAD,CAAQ7B,QAAQ,MAAhB,UACE,eAAC,IAAD,CAAaC,GAAG,aAAaC,YAAU,EAAvC,UACE,cAAC,IAAD,mBACA,cAAC,IAAD,CACEG,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAOgB,EAAQhB,EAAEC,OAAOL,aAGtC,eAAC,IAAD,CAAaF,GAAG,QAAQC,YAAU,EAAlC,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACEE,KAAK,QACLC,YAAY,2BACZC,SAAU,SAACC,GAAD,OAAOlC,EAASkC,EAAEC,OAAOL,aAGvC,eAAC,IAAD,CAAaF,GAAG,WAAWC,YAAU,EAArC,UACE,cAAC,IAAD,uBACA,eAAC,IAAD,CAAYO,KAAK,KAAjB,UACE,cAAC,IAAD,CACEL,KAAMpC,EAAO,OAAS,WACtBqC,YAAY,iBACZC,SAAU,SAACC,GAAD,OAAOhC,EAAYgC,EAAEC,OAAOL,UAExC,cAAC,IAAD,CAAmBO,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQC,EAAE,UAAUF,KAAK,KAAKG,QAASS,EAAvC,SACGrD,EAAQ,cAAC6C,EAAA,EAAD,IAAc,cAACC,EAAA,EAAD,cAK/B,eAAC,IAAD,CAAab,GAAG,WAAWC,YAAU,EAArC,UACE,cAAC,IAAD,+BACA,eAAC,IAAD,CAAYO,KAAK,KAAjB,UACE,cAAC,IAAD,CACEL,KAAMpC,EAAO,OAAS,WACtBqC,YAAY,mBACZC,SAAU,SAACC,GAAD,OAAOkB,EAAmBlB,EAAEC,OAAOL,UAE/C,cAAC,IAAD,CAAmBO,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQC,EAAE,UAAUF,KAAK,KAAKG,QAASS,EAAvC,SACGrD,EAAQ,cAAC6C,EAAA,EAAD,IAAc,cAACC,EAAA,EAAD,cAK/B,eAAC,IAAD,CAAab,GAAG,MAAhB,UACE,cAAC,IAAD,kCACA,cAAC,IAAD,CACEG,KAAK,OACL4B,EAAG,IACHC,OAAO,UACP3B,SAAU,SAACC,GAAD,OAlGE,SAAC2B,GAEnB,GADAL,GAAc,QACDM,IAATD,EAAJ,CAWA,GADAJ,QAAQC,IAAIG,GACM,eAAdA,EAAK9B,MAAuC,cAAd8B,EAAK9B,KA4BrC,OARAlC,EAAM,CACJY,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAEZ2C,GAAc,GA1Bd,IAAMtC,EAAO,IAAI6C,SACjB7C,EAAK8C,OAAO,OAAOH,GACnB3C,EAAK8C,OAAO,gBAAgB,aAC5B9C,EAAK8C,OAAO,aAAa,aACzBC,MAAM,yDACN,CAACC,OAAO,OACPC,KAAKjD,IAEHkD,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAClD,GACLoC,EAAOpC,EAAKqD,IAAIC,YAChBf,QAAQC,IAAIxC,EAAKqD,IAAIC,YACrBhB,GAAc,MAEfiB,OAAM,SAACC,GACNjB,QAAQC,IAAIgB,GACZlB,GAAc,WA3BlB3D,EAAM,CACJY,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA0FS8D,CAAYzC,EAAEC,OAAOyC,MAAM,UAGhD,cAAC,IAAD,CACElC,YAAY,OACZL,MAAM,OACNM,MAAO,CAAEC,UAAW,IACpBL,QAAShC,EACTsC,UAAWU,EALb,yBChISsB,ICvCXC,EAAQC,EDuCGF,EA7Cf,WACE,IAAMxE,EAAUC,cAQhB,OANA0E,qBAAU,WACK3D,KAAK4D,MAAM9D,aAAa+D,QAAQ,cAEnC7E,EAAQkB,KAAK,YACtB,CAAClB,IAGF,eAAC,IAAD,CAAW8E,KAAK,KAAKC,eAAa,EAAlC,UACE,cAAC,IAAD,CACEC,EAAE,OACFC,eAAe,SACf3B,EAAG,EACH4B,GAAG,QACHC,EAAE,OACFC,EAAE,gBACFC,aAAa,KACbC,YAAY,MARd,SAUE,cAAC,IAAD,CAAMC,SAAS,MAAMC,WAAW,YAAhC,yBAIF,cAAC,IAAD,CAAKN,GAAG,QAAQC,EAAE,OAAO7B,EAAG,EAAG+B,aAAa,KAAKC,YAAY,MAA7D,SACE,eAAC,IAAD,CAAMG,UAAQ,EAAChD,QAAQ,eAAvB,UACE,eAAC,IAAD,CAASiD,GAAG,MAAZ,UACE,cAAC,IAAD,oBACA,cAAC,IAAD,yBAEF,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,EAAD,kB,mCEnDDC,EAAqB,SAACC,EAAUR,EAAGS,EAAGC,GAGjD,OACED,EAAID,EAASG,OAAS,GACtBH,EAASC,EAAI,GAAGG,OAAOC,MAAQb,EAAEY,OAAOC,KACxCL,EAASC,GAAGG,OAAOC,MAAQH,EAEpB,GAEND,EAAID,EAASG,OAAS,GACrBH,EAASC,EAAI,GAAGG,OAAOC,MAAQb,EAAEY,OAAOC,KACxCL,EAASC,GAAGG,OAAOC,MAAQH,GAC5BD,IAAMD,EAASG,OAAS,GAAKH,EAASC,GAAGG,OAAOC,MAAQH,EAElD,EACG,QAGDI,EAAe,SAACN,EAAUR,EAAGS,EAAGC,GAC3C,OACED,EAAID,EAASG,OAAS,IACrBH,EAASC,EAAI,GAAGG,OAAOC,MAAQb,EAAEY,OAAOC,UACRxC,IAA/BmC,EAASC,EAAI,GAAGG,OAAOC,MACzBL,EAASC,GAAGG,OAAOC,MAAQH,GAIlBK,EAAgB,SAACP,EAAUC,EAAGC,GACzC,OACED,IAAMD,EAASG,OAAS,GACxBH,EAASA,EAASG,OAAS,GAAGC,OAAOC,MAAQH,GAC7CF,EAASA,EAASG,OAAS,GAAGC,OAAOC,KAI5BG,EAAa,SAACR,EAAUR,EAAGS,GACtC,OAAOA,EAAI,GAAKD,EAASC,EAAI,GAAGG,OAAOC,MAAQb,EAAEY,OAAOC,KAG7CI,EAAY,SAACC,EAAYC,GACpC,OAAOA,EAAM,GAAGN,MAAQK,EAAWL,IAAMM,EAAM,GAAG3D,KAAO2D,EAAM,GAAG3D,M,mCC0BrD4D,EAnDM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC5B,EAAoCC,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAExB,OACE,qCACGJ,EACC,sBAAMxE,QAAS2E,EAAf,SAAwBH,IAExB,cAAC,IAAD,CAAY1B,EAAG,CAAE+B,KAAM,QAAUC,KAAM,cAAC7E,EAAA,EAAD,IAAcD,QAAS2E,IAEhE,eAAC,IAAD,CAAO9E,KAAK,KAAM+E,QAASA,EAASF,OAAQA,EAAQK,YAAU,EAA9D,UACE,cAAC,IAAD,IACA,eAAC,IAAD,CAAchF,EAAE,QAAhB,UACE,cAAC,IAAD,CACEsD,SAAS,OACTC,WAAW,YACXR,EAAE,OACFC,eAAe,SAJjB,SAMGwB,EAAK7D,OAER,cAAC,IAAD,IACA,eAAC,IAAD,CACEoC,EAAE,OACFkC,QAAQ,SACRC,WAAW,SACXlC,eAAe,gBAJjB,UAME,cAAC,IAAD,CACEI,aAAa,OACb+B,QAAQ,QACRC,IAAKZ,EAAKzD,IACVsE,IAAKb,EAAK7D,OAEZ,eAAC,IAAD,CACE2C,SAAU,CAAEwB,KAAM,OAAQQ,GAAI,QAC9BC,WAAW,OACXhC,WAAW,YAHb,oBAKUiB,EAAK/G,YAGjB,cAAC,IAAD,UACE,cAAC,IAAD,CAAQwF,GAAG,WAAWuC,UAAU,QAAQvF,QAAS4E,EAAjD,+B,2BCxDNY,EAAcC,0BAoCPC,EAAY,WACvB,OAAOC,qBAAWH,IAGLI,EAtCM,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SACtB,EAAwCrH,qBAAxC,mBAAO0I,EAAP,KAAqBC,EAArB,KACA,EAAwB3I,qBAAxB,mBAAOoH,EAAP,KAAawB,EAAb,KACA,EAAwC5I,mBAAS,IAAjD,mBAAO6I,EAAP,KAAqBC,EAArB,KACA,EAA0B9I,qBAA1B,mBAAO+I,EAAP,KAAcC,EAAd,KAEMrI,EAAUC,cAUhB,OARA0E,qBAAU,WACR,IAAM2D,EAAWtH,KAAK4D,MAAM9D,aAAa+D,QAAQ,aACjDoD,EAAQK,GAEHA,GAAUtI,EAAQkB,KAAK,OAE3B,CAAClB,IAGF,cAAC0H,EAAYa,SAAb,CACE9G,MAAO,CACLsG,eACAC,kBACAvB,OACAwB,UACAC,eACAC,kBACAC,QACAC,YATJ,SAYG3B,KCmBQ8B,EA1CQ,SAAC,GAAkB,IAAhB5C,EAAe,EAAfA,SAChBa,EAASmB,IAATnB,KAER,OACE,cAAC,IAAD,UACGb,GACCA,EAAS6C,KAAI,SAACrD,EAAGS,GAAJ,OAEX,sBAAKvD,MAAO,CAAEoG,QAAS,QAAvB,WACIxC,EAAaN,EAAUR,EAAGS,EAAGY,EAAKR,MAClCE,EAAcP,EAAUC,EAAGY,EAAKR,OAChC,cAAC,IAAD,CAAS0C,MAAOvD,EAAEY,OAAOpD,KAAMgG,UAAU,eAAeC,UAAQ,EAAhE,SACE,cAAC,IAAD,CACEC,GAAG,MACHC,GAAI,EACJhH,KAAK,KACLiH,OAAO,UACPpG,KAAMwC,EAAEY,OAAOpD,KACfyE,IAAKjC,EAAEY,OAAOhD,QAIpB,sBACEV,MAAO,CACL2G,gBAAgB,GAAD,OACb7D,EAAEY,OAAOC,MAAQQ,EAAKR,IAAM,UAAY,WAE1CiD,WAAYvD,EAAmBC,EAAUR,EAAGS,EAAGY,EAAKR,KACpD1D,UAAW6D,EAAWR,EAAUR,EAAGS,EAAGY,EAAKR,KAAO,EAAI,GACtDZ,aAAc,OACd8D,QAAS,WACTC,SAAU,OATd,SAYGhE,EAAEiE,YA1B+BjE,EAAEa,W,sECKnCqD,GArBO,SAAC,GAAqC,IAAnC7C,EAAkC,EAAlCA,KAAM8C,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,MAC7C,OACE,eAAC,KAAD,CACEC,GAAI,EACJC,GAAI,EACJrE,aAAa,KACbD,EAAG,EACHM,GAAI,EACJjD,QAAQ,QACR8C,SAAU,GACVlD,YAAY,SACZ2G,OAAO,UACP9G,QAASqH,EAVX,UAYG9C,EAAK7D,KACL4G,IAAU/C,EAAKR,KAAO,4CACvB,cAAC0D,GAAA,EAAD,CAAWC,GAAI,QCqBNC,GAtCM,SAAC,GAA6B,IAA5BpD,EAA2B,EAA3BA,KAAM8C,EAAqB,EAArBA,eAE3B,OACE,eAAC,IAAD,CACErH,QAASqH,EACTP,OAAO,UACP9D,GAAG,UACH4E,OAAQ,CACNC,WAAY,UACZC,MAAO,SAET7E,EAAE,OACFH,EAAE,OACFmC,WAAW,SACX6C,MAAM,QACNP,GAAI,EACJC,GAAI,EACJhE,GAAI,EACJL,aAAa,KAff,UAiBE,cAAC,IAAD,CACE0D,GAAI,EACJhH,KAAK,KACLiH,OAAO,UACPpG,KAAM6D,EAAK7D,KACXyE,IAAKZ,EAAKzD,MAEZ,eAAC,IAAD,WACE,cAAC,IAAD,UAAOyD,EAAK7D,OACZ,eAAC,IAAD,CAAM2C,SAAS,KAAf,UACE,yCACCkB,EAAK/G,gBCwPDuK,GAjQc,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,cAAeC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACzD,EAAoCzD,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QACxB,EAA0CzH,qBAA1C,mBAAOgL,EAAP,KAAsBC,EAAtB,KACA,EAA4BjL,mBAAS,IAArC,mBAAOkL,EAAP,KAAeC,EAAf,KACA,EAAwCnL,mBAAS,IAAjD,mBAAOoL,EAAP,KAAqBC,EAArB,KACA,EAA8BrL,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAA0CV,oBAAS,GAAnD,mBAAOsL,EAAP,KAAsBC,EAAtB,KACMpL,EAAQC,cAEd,EAAgDmI,IAAxCG,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBvB,EAAvC,EAAuCA,KAEjCoE,EAAY,uCAAG,WAAOC,GAAP,mBAAA3K,EAAA,yDACnBqK,EAAUM,GACLA,EAFc,iEAOjB/K,GAAW,GACLU,EAAS,CACbC,QAAS,CACPqK,cAAc,UAAD,OAAYtE,EAAKuE,SAVjB,SAaMrK,IAAMsK,IAAN,2BAA8BV,GAAU9J,GAb9C,gBAaTI,EAbS,EAaTA,KACRuC,QAAQC,IAAIxC,GACZd,GAAW,GACX2K,EAAgB7J,GAhBC,kDAkBjBrB,EAAM,CACJY,MAAO,iBACPe,YAAa,oCACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAEZT,GAAW,GA1BM,0DAAH,sDA8BZmL,EAAY,uCAAG,gCAAA/K,EAAA,yDACdkK,EADc,iEAIjBO,GAAiB,GACXnK,EAAS,CACbC,QAAS,CACPqK,cAAc,UAAD,OAAYtE,EAAKuE,SAPjB,SAUMrK,IAAMwK,IAAN,mBAErB,CACEC,OAAQrD,EAAa9B,IACrBoF,SAAUhB,GAEZ5J,GAhBe,gBAUTI,EAVS,EAUTA,KASRuC,QAAQC,IAAIxC,EAAKoF,KAEjB+B,EAAgBnH,GAChBuJ,GAAeD,GACfS,GAAiB,GAvBA,kDAyBjBpL,EAAM,CACJY,MAAO,iBACPe,YAAa,KAAMC,SAASP,KAAKQ,QACjChB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZoK,GAAiB,GAjCA,QAmCnBN,EAAiB,IAnCE,0DAAH,qDAsCZgB,EAAa,uCAAG,WAAOC,GAAP,mBAAApL,EAAA,0DAChB4H,EAAaxB,MAAMiF,MAAK,SAACC,GAAD,OAAOA,EAAExF,MAAQsF,EAAMtF,OAD/B,uBAElBzG,EAAM,CACJY,MAAO,yBACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAPM,6BAYhBuH,EAAa2D,WAAWzF,MAAQQ,EAAKR,IAZrB,uBAalBzG,EAAM,CACJY,MAAO,+BACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAlBM,0CAwBlBT,GAAW,GACLU,EAAS,CACbC,QAAS,CACPqK,cAAc,UAAD,OAAYtE,EAAKuE,SA3BhB,UA8BKrK,IAAMwK,IAAN,iBAErB,CACEC,OAAQrD,EAAa9B,IACrBH,OAAQyF,EAAMtF,KAEhBxF,GApCgB,iBA8BVI,EA9BU,EA8BVA,KASRmH,EAAgBnH,GAChBuJ,GAAeD,GACfpK,GAAW,GAzCO,kDA2ClBP,EAAM,CACJY,MAAO,iBACPe,YAAa,KAAMC,SAASP,KAAKQ,QACjChB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZT,GAAW,GAnDO,QAqDpBuK,EAAiB,IArDG,0DAAH,sDAwDbqB,EAAY,uCAAG,WAAOJ,GAAP,mBAAApL,EAAA,yDACf4H,EAAa2D,WAAWzF,MAAQQ,EAAKR,KAAOsF,EAAMtF,MAAQQ,EAAKR,IADhD,uBAEjBzG,EAAM,CACJY,MAAO,kCACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAPK,0CAajBT,GAAW,GACLU,EAAS,CACbC,QAAS,CACPqK,cAAc,UAAD,OAAYtE,EAAKuE,SAhBjB,SAmBMrK,IAAMwK,IAAN,wBAErB,CACEC,OAAQrD,EAAa9B,IACrBH,OAAQyF,EAAMtF,KAEhBxF,GAzBe,gBAmBTI,EAnBS,EAmBTA,KASR0K,EAAMtF,MAAQQ,EAAKR,IAAM+B,IAAoBA,EAAgBnH,GAC7DuJ,GAAeD,GACfD,IACAnK,GAAW,GA/BM,kDAiCjBP,EAAM,CACJY,MAAO,iBACPe,YAAa,KAAMC,SAASP,KAAKQ,QACjChB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZT,GAAW,GAzCM,QA2CnBuK,EAAiB,IA3CE,0DAAH,sDA8ClB,OACE,qCACE,cAAC,IAAD,CAAYtF,EAAG,CAAE+B,KAAM,QAAUC,KAAM,cAAC7E,EAAA,EAAD,IAAcD,QAAS2E,IAE9D,eAAC,IAAD,CAAOC,QAASA,EAASF,OAAQA,EAAQK,YAAU,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CACE1B,SAAS,OACTC,WAAW,YACXR,EAAE,OACFC,eAAe,SAJjB,SAMG8C,EAAasD,WAGhB,cAAC,IAAD,IACA,eAAC,IAAD,CAAWrG,EAAE,OAAOkC,QAAQ,SAASC,WAAW,SAAhD,UACE,cAAC,IAAD,CAAKhC,EAAE,OAAOH,EAAE,OAAO4G,SAAS,OAAOC,GAAI,EAA3C,SACG9D,EAAaxB,MAAMkC,KAAI,SAACgD,GAAD,OACtB,cAAC,GAAD,CAEEhF,KAAMgF,EACNjC,MAAOzB,EAAa2D,WACpBnC,eAAgB,kBAAMoC,EAAaF,KAH9BA,EAAExF,UAOb,eAAC,IAAD,CAAajB,EAAE,OAAf,UACE,cAAC,IAAD,CACErD,YAAY,YACZ+D,GAAI,EACJjE,MAAO4I,EACPzI,SAAU,SAACC,GAAD,OAAOyI,EAAiBzI,EAAEC,OAAOL,UAE7C,cAAC,IAAD,CACEgB,QAAQ,QACRJ,YAAY,OACZyJ,GAAI,EACJtJ,UAAWmI,EACXzI,QAASgJ,EALX,uBAUF,cAAC,IAAD,UACE,cAAC,IAAD,CACEvJ,YAAY,oBACZ+D,GAAI,EACJ9D,SAAU,SAACC,GAAD,OAAOgJ,EAAahJ,EAAEC,OAAOL,YAI1C3B,EACC,cAAC,IAAD,CAASiC,KAAK,OADR,OAGN0I,QAHM,IAGNA,OAHM,EAGNA,EAAchC,KAAI,SAAChC,GAAD,OAChB,cAAC,GAAD,CAEEA,KAAMA,EACN8C,eAAgB,kBAAM+B,EAAc7E,KAF/BA,EAAKR,WAOlB,cAAC,IAAD,UACE,cAAC,IAAD,CAAQ/D,QAAS,kBAAMyJ,EAAalF,IAAOpE,YAAY,MAAvD,qC,8BPsFG0J,GA9UI,SAAC,GAAmC,IAAjC5B,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAChC,EAAkC/K,oBAAS,GAA3C,mBAAO2M,EAAP,KAAkBC,EAAlB,KACA,EAAgC5M,mBAAS,IAAzC,mBAAOuG,EAAP,KAAiBsG,EAAjB,KACA,EAA8B7M,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAoCV,mBAAS,IAA7C,mBAAO8M,EAAP,KAAmBC,EAAnB,KACA,EAA8C/M,oBAAS,GAAvD,mBAAOgN,EAAP,KAAwBC,EAAxB,KACA,EAA4BjN,oBAAS,GAArC,mBAAOkN,EAAP,KAAeC,EAAf,KACA,EAAgCnN,oBAAS,GAAzC,mBAAOoN,EAAP,KAAiBC,EAAjB,KACMlN,EAAQC,cAERkN,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeA,GACfC,iBAAkB,CAChBC,oBAAqB,mBAGzB,GACEpF,IADMG,GAAR,GAAQA,aAAcC,GAAtB,GAAsBA,gBAAiBvB,GAAvC,GAAuCA,KAAMyB,GAA7C,GAA6CA,aAAcC,GAA3D,GAA2DA,gBAarD+B,GAAa,uCAAG,gCAAA/J,EAAA,yDACf4H,GADe,iEAIZtH,EAAS,CACbC,QAAS,CACPqK,cAAc,UAAD,OAAYtE,GAAKuE,SAIlCjL,GAAW,GAVO,SAYKY,IAAMsK,IAAN,uBACLlD,GAAa9B,KAC7BxF,GAdgB,gBAYVI,EAZU,EAYVA,KAIRqL,EAAYrL,GACZd,GAAW,GAEX0E,EAAOwI,KAAK,YAAalF,GAAa9B,KAnBpB,kDAqBlBzG,EAAM,CACJY,MAAO,iBACPe,YAAa,8BACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA3BM,0DAAH,qDAgCb0M,GAAW,uCAAG,WAAOC,GAAP,mBAAAhN,EAAA,yDACA,UAAdgN,EAAMC,MAAmBjB,EADX,wBAEhB1H,EAAOwI,KAAK,cAAelF,GAAa9B,KAFxB,SAIRxF,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBqK,cAAc,UAAD,OAAYtE,GAAKuE,SAGlCoB,EAAc,IAVA,SAWSzL,IAAMC,KAC3B,eACA,CACEyI,QAAS8C,EACTf,OAAQrD,IAEVtH,GAjBY,gBAWNI,EAXM,EAWNA,KAQR4D,EAAOwI,KAAK,aAAcpM,GAC1BqL,EAAY,GAAD,mBAAKtG,GAAL,CAAe/E,KApBZ,kDAsBdrB,EAAM,CACJY,MAAO,iBACPe,YAAa,6BACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA5BE,0DAAH,sDAkCjBmE,qBAAU,YACRF,EAAS4I,KArGI,0BAsGNJ,KAAK,QAASxG,IACrBhC,EAAO6I,GAAG,aAAa,kBAAMhB,GAAmB,MAChD7H,EAAO6I,GAAG,UAAU,kBAAMZ,GAAY,MACtCjI,EAAO6I,GAAG,eAAe,kBAAMZ,GAAY,QAG1C,IAEH/H,qBAAU,WACRuF,KAEAxF,EAAsBqD,KAErB,CAACA,KAEJpD,qBAAU,WACRF,EAAO6I,GAAG,oBAAoB,SAACC,GAE1B7I,GACDA,EAAoBuB,MAAQsH,EAAmBC,KAAKvH,IAOpDiG,EAAY,GAAD,mBAAKtG,GAAL,CAAe2H,KALrBrF,GAAauF,SAASF,KACzBpF,GAAgB,CAACoF,GAAF,mBAAyBrF,MACxCkC,GAAeD,UAQvB,IC7G4B7D,GAAYC,GDkIlCmH,GAAQ,uCAAG,gCAAAvN,EAAA,0DACXgM,EADW,wBAEb1H,EAAOwI,KAAK,cAAelF,GAAa9B,KAF3B,SAILxF,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBqK,cAAc,UAAD,OAAYtE,GAAKuE,SAGlCoB,EAAc,IAVH,SAWYzL,IAAMC,KAC3B,eACA,CACEyI,QAAS8C,EACTf,OAAQrD,IAEVtH,GAjBS,gBAWHI,EAXG,EAWHA,KAQR4D,EAAOwI,KAAK,aAAcpM,GAC1BqL,EAAY,GAAD,mBAAKtG,GAAL,CAAe/E,KApBf,kDAsBXrB,EAAM,CACJY,MAAO,iBACPe,YAAa,6BACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA5BD,0DAAH,qDAkCd,OACE,mCACGuH,GACC,qCACE,eAAC,IAAD,CACExC,SAAU,CAAEwB,KAAM,OAAQQ,GAAI,QAC9BsE,GAAI,EACJpC,GAAI,EACJtE,EAAE,OACFK,WAAW,YACXR,EAAE,OACFC,eAAgB,CAAE8B,KAAM,iBACxBI,WAAW,SARb,UAUE,cAAC,IAAD,CACEnC,EAAG,CAAE+B,KAAM,OAAQQ,GAAI,QACvBP,KAAM,cAAC2G,EAAA,EAAD,IACNzL,QAAS,kBAAM8F,GAAgB,OAEhCpC,IACGmC,GAAa6F,YAQb,qCACG7F,GAAasD,SAASwC,cACvB,cAAC,GAAD,CACE3D,cAAeA,GACfC,WAAYA,EACZC,cAAeA,OAZnB,qCACG/D,EAAUI,GAAMsB,GAAaxB,OAC9B,cAAC,EAAD,CACEE,MC5LUH,GD4LUG,GC5LEF,GD4LIwB,GAAaxB,MC3LlDA,GAAM,GAAGN,MAAQK,GAAWL,IAAMM,GAAM,GAAKA,GAAM,aDyMlD,qBAAKuH,UAAU,WAAf,SACE,eAAC,IAAD,CAEE9I,EAAE,OACFkC,QAAQ,SACRjC,eAAe,WACf3B,EAAG,EACH6B,EAAE,OACFlD,EAAE,OACFoD,aAAa,KACb0I,UAAU,SATZ,UAWGjO,EACC,cAAC,IAAD,CACEiC,KAAK,KACLoD,EAAG,GACHlD,EAAG,GACH+L,UAAU,SACVC,OAAO,SAGT,qBAAKH,UAAU,WAAf,SACE,cAAC,EAAD,CAAgBlI,SAAUA,MAG7B6G,EACC,8BACE,cAAC,KAAD,CACEyB,QAASvB,EACT3K,MAAO,GACPM,MAAO,CAAE6L,aAAc,EAAGjF,WAAY,OAI1C,6BAEF,cAAC,IAAD,CACElE,EAAG,CAAE+B,KAAM,QACXqH,UAAWlB,GACX3L,GAAG,aACHC,YAAU,EACVsH,GAAI,EALN,SAQE,qBAAKgF,UAAU,UAAf,SACE,eAAC,IAAD,CACE9I,EAAE,OACFE,GAAG,OACHD,eAAe,gBACfjD,MAAM,OACNqM,OAAO,OALT,UAOE,cAAC,IAAD,CAAK/K,EAAG,EAAR,SACE,sBAAKwK,UAAU,QAAf,UACE,cAAC,IAAD,CACE5L,QAjQI,WAC1B+J,GAAcD,IAiQQhF,KAAM,cAAC,KAAD,CAAcgD,MAAM,YAG5B,qBAAK8D,UAAU,qBAAf,SACG9B,GACC,cAAC,KAAD,CAAQsC,aApQT,SAACzM,GACxBuK,GAAc,SAACD,GAAD,OAAgBA,EAActK,EAAE0M,mBAyQ9B,cAAC,IAAD,CACEC,GAAI,EACJ3C,GAAI,EACJjC,GAAI,EACJ6E,GAAI,EACJzM,MAAM,OALR,SAOE,cAAC,IAAD,CACES,QAAQ,SACRyC,GAAG,UACHvD,YAAY,qBACZF,MAAO0K,EACPvK,SA5KA,SAACC,GAGrB,GAFAuK,EAAcvK,EAAEC,OAAOL,OAElB4K,EAAL,CAEKE,IACHC,GAAU,GACV/H,EAAOwI,KAAK,SAAUlF,GAAa9B,MAErC,IAAIyI,GAAiB,IAAIC,MAAOC,UAEhCC,YAAW,YACK,IAAIF,MAAOC,UACAF,GAHT,KAIenC,IAC7B9H,EAAOwI,KAAK,cAAelF,GAAa9B,KACxCuG,GAAU,MANI,WAqKF,cAAC,IAAD,CAAKlJ,EAAG,EAAR,SACE,cAAC,IAAD,CACE0B,EAAG,CAAE+B,KAAM,QACXrF,KAAK,SACLD,MAAO0K,EACPjK,QAASwL,GACT1G,KAAM,cAAC,KAAD,uBAYtB,cAAC,IAAD,CAAKhC,EAAE,OAAOmC,WAAW,SAASlC,eAAe,SAAShD,EAAE,OAA5D,SACE,cAAC,IAAD,CAAMsD,SAAS,MAAMsG,GAAI,EAAGrG,WAAW,YAAvC,oDQnUKsJ,GAnBC,SAAC,GAAmC,IAAjC3E,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACrBrC,EAAiBH,IAAjBG,aAER,OACE,cAAC,IAAD,CACE/C,EAAG,CAAE+B,KAAMgB,EAAe,OAAS,OAAQR,GAAI,QAC/CJ,WAAW,SACXD,QAAQ,SACR5D,EAAG,EACH4B,GAAG,QACHC,EAAG,CAAE4B,KAAM,OAAQQ,GAAI,OACvBlC,aAAa,KACbC,YAAY,MARd,SAUE,cAAC,GAAD,CAAY6E,WAAYA,EAAYC,cAAeA,O,oBCJ1C2E,GAZK,WAClB,OACE,eAAC,IAAD,WACE,cAAC,KAAD,CAAUV,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,SACjB,cAAC,KAAD,CAAUA,OAAO,aCuLRW,GA5KQ,SAAC,GAAkB,IAAhBtI,EAAe,EAAfA,SACxB,EAAoCC,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QACxB,EAA0CzH,qBAA1C,mBAAOgL,EAAP,KAAsBC,EAAtB,KACA,EAA0CjL,mBAAS,IAAnD,mBAAO4P,EAAP,KAAsBC,EAAtB,KACA,EAA4B7P,mBAAS,IAArC,mBAAOkL,EAAP,KAAeC,EAAf,KACA,EAAwCnL,mBAAS,IAAjD,mBAAOoL,EAAP,KAAqBC,EAArB,KACA,EAA8BrL,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACMP,EAAQC,cAEd,EAAkCmI,IAA1BnB,EAAR,EAAQA,KAAM2B,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,SAiBfwC,EAAY,uCAAG,WAAOC,GAAP,mBAAA3K,EAAA,yDACnBqK,EAAUM,GACLA,EAFc,iEAOjB/K,GAAW,GACLU,EAAS,CACbC,QAAS,CACPqK,cAAc,UAAD,OAAYtE,EAAKuE,SAVjB,SAaMrK,IAAMsK,IAAN,2BAA8BV,GAAU9J,GAb9C,gBAaTI,EAbS,EAaTA,KACRuC,QAAQC,IAAIxC,GACZd,GAAW,GACX2K,EAAgB7J,GAhBC,kDAkBjBrB,EAAM,CACJY,MAAO,iBACPe,YAAa,oCACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAxBK,0DAAH,sDAiCZ2O,EAAY,uCAAG,gCAAAhP,EAAA,yDACdkK,GAAkB4E,EADJ,uBAEjBzP,EAAM,CACJY,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QAPK,0CAaXC,EAAS,CACbC,QAAS,CACPqK,cAAc,UAAD,OAAYtE,EAAKuE,SAfjB,SAkBMrK,IAAMC,KAAN,kBAErB,CACEgC,KAAMyH,EACN9D,MAAOvF,KAAKC,UAAUgO,EAAcxG,KAAI,SAACgD,GAAD,OAAOA,EAAExF,SAEnDxF,GAxBe,gBAkBTI,EAlBS,EAkBTA,KAQRwH,EAAS,CAACxH,GAAF,mBAAWuH,KACnBtB,IACAtH,EAAM,CACJY,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAjCK,kDAoCjBhB,EAAM,CACJY,MAAO,6BACPe,YAAa,KAAMC,SAASP,KAC5BR,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WA1CK,0DAAH,qDA+ClB,OACE,qCACE,sBAAM0B,QAAS2E,EAAf,SAAwBH,IAExB,eAAC,IAAD,CAAOI,QAASA,EAASF,OAAQA,EAAQK,YAAU,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CACE1B,SAAS,OACTC,WAAW,YACXR,EAAE,OACFC,eAAe,SAJjB,+BAQA,cAAC,IAAD,IACA,eAAC,IAAD,CAAWD,EAAE,OAAOkC,QAAQ,SAASC,WAAW,SAAhD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACExF,YAAY,YACZ+D,GAAI,EACJ9D,SAAU,SAACC,GAAD,OAAOyI,EAAiBzI,EAAEC,OAAOL,YAG/C,cAAC,IAAD,UACE,cAAC,IAAD,CACEE,YAAY,mCACZ+D,GAAI,EACJ9D,SAAU,SAACC,GAAD,OAAOgJ,EAAahJ,EAAEC,OAAOL,YAG3C,cAAC,IAAD,CAAK0D,EAAE,OAAOH,EAAE,OAAO4G,SAAS,OAAhC,SACGqD,EAAcxG,KAAI,SAACgD,GAAD,OACjB,cAAC,GAAD,CAEEhF,KAAMgF,EACNlC,eAAgB,kBAvFV6F,EAuF6B3D,OAtFjDyD,EAAiBD,EAAcI,QAAO,SAACC,GAAD,OAASA,EAAIrJ,MAAQmJ,EAAQnJ,QADhD,IAACmJ,IAqFD3D,EAAExF,UAMZnG,EAEC,6CAFM,OAIN2K,QAJM,IAINA,OAJM,EAINA,EACI8E,MAAM,EAAG,GACV9G,KAAI,SAAChC,GAAD,OACH,cAAC,GAAD,CAEEA,KAAMA,EACN8C,eAAgB,kBAjJbiG,EAiJ+B/I,OAhJ9CwI,EAAcxB,SAAS+B,GACzBhQ,EAAM,CACJY,MAAO,qBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QAKd0O,EAAiB,GAAD,mBAAKD,GAAL,CAAoBO,MAZlB,IAACA,IA+IE/I,EAAKR,WAOpB,cAAC,IAAD,UACE,cAAC,IAAD,CAAQ/D,QAASiN,EAAc9M,YAAY,OAA3C,qCC1CGoN,GAlIC,SAAC,GAAoB,IAAlBtF,EAAiB,EAAjBA,WACjB,EAAoC9K,qBAApC,mBAAOiH,EAAP,KAAmBoJ,EAAnB,KAEA,EAAiE9H,IAAzDG,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBvB,EAAvC,EAAuCA,KAAM2B,EAA7C,EAA6CA,MAAOC,EAApD,EAAoDA,SAE9C7I,EAAQC,cAGRkQ,EAAU,uCAAG,gCAAAxP,EAAA,sEAGTM,EAAS,CACbC,QAAS,CACPqK,cAAc,UAAD,OAAYtE,EAAKuE,SALnB,SASQrK,IAAMsK,IAAI,YAAaxK,GAT/B,gBASPI,EATO,EASPA,KACRwH,EAASxH,GAVM,gDAYfrB,EAAM,CACJY,MAAO,iBACPe,YAAa,2BACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAlBG,yDAAH,qDA6BhB,OANAmE,qBAAU,WACR+K,EAAc1O,KAAK4D,MAAM9D,aAAa+D,QAAQ,cAC9C8K,MAEC,CAACxF,IAGF,eAAC,IAAD,CACEnF,EAAG,CAAE+B,KAAMgB,EAAe,OAAS,OAAQR,GAAI,QAC/CL,QAAQ,SACRC,WAAW,SACX7D,EAAG,EACH4B,GAAG,QACHC,EAAG,CAAE4B,KAAM,OAAQQ,GAAI,OACvBlC,aAAa,KACbC,YAAY,MARd,UAUE,eAAC,IAAD,CACEuG,GAAI,EACJpC,GAAI,EACJlE,SAAU,CAAEwB,KAAM,OAAQQ,GAAI,QAC9B/B,WAAW,YACXgC,WAAW,OACXxC,EAAE,OACFG,EAAE,OACFF,eAAe,gBACfkC,WAAW,SATb,qBAYE,cAAC,GAAD,UACE,cAAC,IAAD,CACEnC,EAAE,OACFO,SAAU,CAAEwB,KAAM,OAAQQ,GAAI,OAAQqI,GAAI,QAC1CC,UAAW,cAACC,GAAA,EAAD,IAHb,iCASJ,cAAC,IAAD,CACE9K,EAAE,OACFkC,QAAQ,SACR5D,EAAG,EACH4B,GAAG,UACHC,EAAE,OACFlD,EAAE,OACFoD,aAAa,KACb0I,UAAU,SARZ,SAUG3F,EACC,cAAC,IAAD,CAAO2F,UAAU,SAAjB,SACG3F,EAAMK,KAAI,SAAC+E,GAAD,OACT,eAAC,IAAD,CACExI,EAAG,CAAE+B,KAAM,QACX7E,QAAS,kBAAM8F,EAAgBwF,IAC/BxE,OAAO,UACP9D,GAAI6C,IAAiByF,EAAO,QAAU,UACtCxD,MAAOjC,IAAiByF,EAAO,QAAU,QACzC/D,GAAI,EACJC,GAAI,EACJrE,aAAa,KARf,UAWE,cAAC,IAAD,UACE,cAAC,IAAD,CACEtD,KAAK,KACLiH,OAAO,UACP3B,IAAMmG,EAAKI,YAA8B,GAAlBJ,EAAKjH,MAAM,GAAGvD,QAGzC,eAAC,IAAD,CAAK+F,GAAI,EAAT,UACE,cAAC,IAAD,CAAMxD,SAAS,KAAKkE,GAAI,EAAxB,SACI+D,EAAKI,YAILJ,EAAKnC,SAFLhF,EAAUC,EAAYkH,EAAKjH,SAK9BiH,EAAKuC,eACJ,eAAC,IAAD,CAAMxK,SAAS,KAAKkE,GAAI,EAAxB,UACE,8BAAI+D,EAAKuC,cAAc/J,OAAOpD,KAA9B,SACC4K,EAAKuC,cAAc1G,QAAQtD,OAAS,GACjCyH,EAAKuC,cAAc1G,QAAQ2G,UAAU,EAAG,IAAM,MAC9CxC,EAAKuC,cAAc1G,gBAvBxBmE,EAAKvH,UA+BhB,cAAC,GAAD,U,6DC0FKgK,OA9Lf,WACE,MAA4B5Q,mBAAS,IAArC,mBAAOkL,EAAP,KAAeC,EAAf,KACA,EAAwCnL,mBAAS,IAAjD,mBAAOoL,EAAP,KAAqBC,EAArB,KACA,EAA8BrL,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAsCV,oBAAS,GAA/C,mBAAO6Q,EAAP,KAAoBC,EAApB,KAEA,EAOIvI,IANFI,EADF,EACEA,gBACAvB,EAFF,EAEEA,KACAyB,EAHF,EAGEA,aACAC,EAJF,EAIEA,gBACAC,EALF,EAKEA,MACAC,EANF,EAMEA,SAGI7I,EAAQC,cACd,EAAoCkH,cAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAClB9G,EAAUC,cAOV4K,EAAY,uCAAG,gCAAA1K,EAAA,yDACdoK,EADc,uBAEjB/K,EAAM,CACJY,MAAO,mCACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,aAPK,0CAajBT,GAAW,GAELU,EAAS,CACbC,QAAS,CACPqK,cAAc,UAAD,OAAYtE,EAAKuE,SAjBjB,SAqBMrK,IAAMsK,IAAN,2BAA8BV,GAAU9J,GArB9C,gBAqBTI,EArBS,EAqBTA,KACRd,GAAW,GACX2K,EAAgB7J,GAvBC,kDAyBjBrB,EAAM,CACJY,MAAO,iBACPe,YAAa,oCACbd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBA/BK,0DAAH,qDAoCZ4P,EAAU,uCAAG,WAAOtK,GAAP,mBAAA3F,EAAA,sEAIfgQ,GAAe,GACT1P,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBqK,cAAc,UAAD,OAAYtE,EAAKuE,SARnB,SAWQrK,IAAMC,KAAN,YAAwB,CAAEkF,UAAUrF,GAX5C,gBAWPI,EAXO,EAWPA,KAEHuH,EAAMoD,MAAK,SAAC6E,GAAD,OAAOA,EAAEpK,MAAQpF,EAAKoF,QAAMoC,EAAS,CAACxH,GAAF,mBAAWuH,KAC/DJ,EAAgBnH,GAChBsP,GAAe,GACfrJ,IAhBe,kDAkBftH,EAAM,CACJY,MAAO,0BACPe,YAAa,KAAME,QACnBhB,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAxBG,0DAAH,sDA6BhB,OACE,qCACE,eAAC,IAAD,CACEwE,EAAE,OACFC,eAAe,gBACfkC,WAAW,SACXjC,GAAG,QACHC,EAAE,OACF7B,EAAE,oBACFgC,YAAY,MAPd,UASE,cAAC,IAAD,CAASqD,MAAM,uBAAuBE,UAAQ,EAACD,UAAU,aAAzD,SACE,eAAC,IAAD,CAAQnG,QAAQ,QAAQP,QAAS2E,EAAjC,UACE,mBAAGiH,UAAU,kBACb,cAAC,IAAD,CAAM9I,EAAG,CAAE+B,KAAM,OAAQQ,GAAI,QAAUkC,GAAI,EAA3C,8BAKJ,cAAC,IAAD,CAAMlE,SAAS,MAAMC,WAAW,YAAhC,uBAGA,gCACE,eAAC,KAAD,WACE,eAAC,KAAD,CAAYlC,EAAG,EAAf,UACE,cAAC,KAAD,CACEgN,MAAOpI,EAAanC,OACpBwK,OAAQC,UAAOC,QAEjB,cAACC,GAAA,EAAD,CAAUnL,SAAS,MAAMH,EAAG,OAE9B,eAAC,KAAD,CAAUwE,GAAI,EAAd,WACI1B,EAAanC,QAAU,kBACxBmC,EAAaO,KAAI,SAACkI,GAAD,OAChB,cAAC,KAAD,CAEEzO,QAAS,WACP8F,EAAgB2I,EAAMnD,MACtBrF,EAAgBD,EAAamH,QAAO,SAACuB,GAAD,OAAOA,IAAMD,OAJrD,SAOGA,EAAMnD,KAAKI,YAAX,yBACqB+C,EAAMnD,KAAKnC,UADhC,2BAEuBhF,EAAUI,EAAMkK,EAAMnD,KAAKjH,SAR9CoK,EAAM1K,cAanB,eAAC,KAAD,WACE,cAAC,KAAD,CAAY4K,GAAIC,IAAQ5L,GAAG,QAAQ2K,UAAW,cAACkB,GAAA,EAAD,IAA9C,SACE,cAAC,IAAD,CACEhP,KAAK,KACLiH,OAAO,UACPpG,KAAM6D,EAAK7D,KACXyE,IAAKZ,EAAKzD,QAGd,eAAC,KAAD,WACE,eAAC,EAAD,CAAcyD,KAAMA,EAApB,UACE,cAAC,KAAD,yBAAgC,OAElC,cAAC,KAAD,IACA,cAAC,KAAD,CAAUvE,QApIA,WACpBpB,aAAakQ,WAAW,YACxBhR,EAAQkB,KAAK,MAkIH,gCAMR,eAAC,KAAD,CAAQ0H,UAAU,OAAO9B,QAASA,EAASF,OAAQA,EAAnD,UACE,cAAC,IAAD,IACA,eAAC,KAAD,WACE,cAAC,IAAD,CAAcqK,kBAAkB,MAAhC,0BACA,eAAC,IAAD,WACE,eAAC,IAAD,CAAKjM,EAAE,OAAO6G,GAAI,EAAlB,UACE,cAAC,IAAD,CACElK,YAAY,0BACZoH,GAAI,EACJtH,MAAO8I,EACP3I,SAAU,SAACC,GAAD,OAAO2I,EAAU3I,EAAEC,OAAOL,UAEtC,cAAC,IAAD,CAAQS,QAAS2I,EAAjB,mBAED/K,EACC,cAAC,GAAD,IADM,OAGN2K,QAHM,IAGNA,OAHM,EAGNA,EAAchC,KAAI,SAAChC,GAAD,OAChB,cAAC,GAAD,CAEEA,KAAMA,EACN8C,eAAgB,kBAAM6G,EAAW3J,EAAKR,OAFjCQ,EAAKR,QAMfiK,GAAe,cAAC,IAAD,CAASpE,GAAG,OAAO9G,EAAE,sBChMlCkM,GAjBE,WACf,MAAoC7R,oBAAS,GAA7C,mBAAO8K,EAAP,KAAmBC,EAAnB,KACQ3D,EAASmB,IAATnB,KAER,OACE,sBAAKnE,MAAO,CAAEN,MAAO,QAArB,UACGyE,GAAQ,cAAC,GAAD,IACT,eAAC,IAAD,CAAKzB,EAAE,OAAOC,eAAe,gBAAgBE,EAAE,OAAOlD,EAAE,SAASqB,EAAE,OAAnE,UACGmD,GAAQ,cAAC,GAAD,CAAS0D,WAAYA,IAC7B1D,GACC,cAAC,GAAD,CAAS0D,WAAYA,EAAYC,cAAeA,WCH3C+G,OATf,WACE,OACE,sBAAKrD,UAAU,MAAf,UACE,cAAC,IAAD,CAAOsD,KAAK,IAAIC,UAAW7M,EAAU8M,OAAK,IAC1C,cAAC,IAAD,CAAOF,KAAK,SAASC,UAAWH,SCGvBK,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB1N,MAAK,YAAkD,IAA/C2N,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,mBCEdO,IAASC,OACP,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,EAAD,UACE,cAAC,GAAD,UAINC,SAASC,eAAe,SAM1BX,O","file":"static/js/main.aabbb727.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    // console.log(email, password);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      // console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ?  <ViewIcon/> : <ViewOffIcon/>}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [pic, setPic] = useState(\"\");\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\",pics);\n      data.append(\"upload_preset\",\"hello-app\");\n      data.append(\"cloud_name\",\"dbo9twrrz\");\n      fetch(\"https://api.cloudinary.com/v1_1/dbo9twrrz/image/upload\",\n      {method:\"post\",\n       body:data,\n       })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ?  <ViewIcon/> : <ViewOffIcon/>}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ?  <ViewIcon/> : <ViewOffIcon/>}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          Say-Hello\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { BsEmojiSmile } from 'react-icons/bs';\nimport { IoSendSharp } from 'react-icons/io5';\nimport Picker from 'emoji-picker-react';\nconst ENDPOINT = \"http://localhost:5000\";\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [showEmoji, setShowEmoji] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const handleEmojiShowHide = () => {\n    setShowEmoji(!showEmoji);\n  }\n  const handleEmojiClick = (e) => {\n    setNewMessage((newMessage) => newMessage += e.emoji);\n  }\n  // const sendEmoji=(e)=>{\n  //   setNewMessage(e.target.value);\n  // }\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"newMessage\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  const sendText = async () => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"newMessage\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <div className=\"chatpage\">\n            <Box\n\n              d=\"flex\"\n              flexDir=\"column\"\n              justifyContent=\"flex-end\"\n              p={3}\n              w=\"100%\"\n              h=\"100%\"\n              borderRadius=\"lg\"\n              overflowY=\"hidden\"\n            >\n              {loading ? (\n                <Spinner\n                  size=\"xl\"\n                  w={20}\n                  h={20}\n                  alignSelf=\"center\"\n                  margin=\"auto\"\n                />\n              ) : (\n                <div className=\"messages\">\n                  <ScrollableChat messages={messages} />\n                </div>\n              )}\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    width={70}\n                    style={{ marginBottom: 5, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <FormControl\n                d={{ base: \"flex\" }}\n                onKeyDown={sendMessage}\n                id=\"first-name\"\n                isRequired\n                mt={3}\n              >\n\n                <div className=\"textbox\">\n                  <Box\n                    d=\"flex\"\n                    bg=\"gray\"\n                    justifyContent=\"space-between\"\n                    width=\"100%\"\n                    height=\"100%\"\n                  >\n                    <Box p={3}>\n                      <div className=\"emoji\">\n                        <IconButton\n                          onClick={handleEmojiShowHide}\n                          icon={<BsEmojiSmile color=\"black\" />}\n                        />\n\n                        <div className=\"emoji-picker-react\">\n                          {showEmoji &&\n                            <Picker onEmojiClick={handleEmojiClick} />\n                          }\n                        </div>\n                      </div>\n                    </Box>\n\n                    <Box\n                      pt={3}\n                      pb={3}\n                      pl={0}\n                      pr={0}\n                      width=\"100%\"\n                    >\n                      <Input\n                        variant=\"filled\"\n                        bg=\"#E0E0E0\"\n                        placeholder=\"Enter a message...\"\n                        value={newMessage}\n                        onChange={typingHandler}\n                      />\n                    </Box>\n                    <Box p={3}>\n                      <IconButton\n                        d={{ base: \"flex\" }}\n                        type='submit'\n                        value={newMessage}\n                        onClick={sendText}\n                        icon={<IoSendSharp />}\n                      />\n                    </Box>\n                  </Box>\n                </div>\n              </FormControl>\n            </Box>\n          </div>\n        </>\n      ) : (\n        // to get socket.io on same page\n\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n\n      )}\n    </>\n  );\n\n}\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\"  onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"20px\", md: \"25px\" }}\n              fontWeight='bold'\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button bg=\"pink.700\" textColor='white' onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nconst UserListItem = ({user, handleFunction }) => {\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Avatar, Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  // console.log(chats);\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"17px\" }}\n        fontFamily=\"Work sans\"\n        fontWeight='bold'\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                d={{ base: \"flex\" }}\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"green\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Box>\n                  <Avatar\n                    size=\"md\"\n                    cursor=\"pointer\"\n                    src={!chat.isGroupChat?chat.users[1].pic:\"\"}\n                    />\n                </Box>\n                <Box mr={3}>\n                  <Text fontSize=\"lg\" px={3}>\n                    {!chat.isGroupChat\n                      ?\n                      getSender(loggedUser, chat.users)\n                      :\n                      chat.chatName\n                    }\n                  </Text>\n                  {chat.latestMessage && (\n                    <Text fontSize=\"sm\" px={3}>\n                      <b>{chat.latestMessage.sender.name} : </b>\n                      {chat.latestMessage.content.length > 50\n                        ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                        : chat.latestMessage.content}\n                    </Text>\n                  )}\n                </Box>\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    // console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Say-Hello\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}